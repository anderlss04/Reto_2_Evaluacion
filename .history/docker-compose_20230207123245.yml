version: '3.7'

networks:
  frontend:
    # Use a custom driver
    driver: bridge
  backend:
    # Use a custom driver which takes special options
    driver: bridge
    driver_opts:
      foo: "1"
      bar: "2"

services:
  api1:
    build:
      context: .
      dockerfile: Dockerfile
    # volumes:
    #   - ../api_otro:/var/www/html '10'
    ports:
      - 3000:3000
    depends_on:
      - db
    deploy:
      resources:
        reservations:
          cpus: '40'
          memory: 80M
    networks:
      - backend
  api2:
    build:
      context: .
      dockerfile: Dockerfile
    # volumes:
    #   - ../api_otro:/var/www/html
    # ports:
    #   - 3001:3000
    depends_on:
      - db
    deploy:
      resources:
        reservations:
          cpus: '40'
          memory: 80M
    networks:
      - backend
  api3:
    build:
      context: .
      dockerfile: Dockerfile
    # volumes:
    #   - ../api_otro:/var/www/html
    # ports:
    #   - 3002:3000
    depends_on:
      - db
    deploy:
      resources:
        reservations:
          cpus: '40'
          memory: 80M
    networks:
      - backend
  # api4:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   # volumes:
  #   #   - ../api_otro:/var/www/html
  #   # ports:
  #   #   - 3003:3000
  #   depends_on:
  #     - db
  #   deploy:
  #     resources:
  #       reservations:
  #         cpus: '40'
  #         memory: 80M
  #   networks:
  #     - backend
  db:
    image: mysql
    environment:
      MYSQL_DATABASE: ibex35
      MYSQL_USER: ander
      MYSQL_PASSWORD: 123@Nder
      MYSQL_ROOT_PASSWORD: 123@Nder
      innodb_buffer_pool_size: 512M
    ports:
      - "3306:3306"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 4s
      retries: 2
    networks:
      - backend

  nginx:
    image: nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - apache
      - api1
      - api2
      - api3
    networks:
      - frontend
      - backend
       

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    ports:
      - 8080:80
    depends_on:
      - db
    networks:
      - backend
      - frontend

  apache:
    image: httpd:2.4
    volumes:
      # - ./web/dist:/usr/local/apache2/htdocs
      - ./web:/usr/local/apache2/htdocs
    environment:
    
      IP_ADDRESS: ${CURRENT_IP:-$(hostname -i)}
    networks:
      - frontend
      
  python:
    build:
      context: .
      dockerfile: DockerfilePython
    # volumes:
    #   - ../generador_datos/programa/generador:/app
    depends_on:
      db:
        condition: service_healthy
    command:
      - bash
      - -c
      - "python3 /app/generador.py"
    networks:
      - backend


